/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tripstory.api;

import com.tripstory.model.CreateTripRequest;
import com.tripstory.model.ErrorResponse;
import com.tripstory.model.Trip;
import com.tripstory.model.UpdateTripRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-06T00:09:12.897247+01:00[Europe/Dublin]")
@Validated
@Tag(name = "Trips", description = "the Trips API")
public interface TripsApi {

    /**
     * GET /api/trips : Get all trips
     * Retrieve a list of all trips for the authenticated user
     *
     * @return Successfully retrieved trips (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiTripsGet",
        summary = "Get all trips",
        description = "Retrieve a list of all trips for the authenticated user",
        tags = { "Trips" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved trips", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Trip.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/trips",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Trip>> apiTripsGet(
        
    );


    /**
     * POST /api/trips : Create a new trip
     * Create a new trip with the provided details
     *
     * @param createTripRequest  (required)
     * @return Trip created successfully (status code 201)
     *         or Bad request - invalid input (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiTripsPost",
        summary = "Create a new trip",
        description = "Create a new trip with the provided details",
        tags = { "Trips" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Trip created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Trip.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/trips",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Trip> apiTripsPost(
        @Parameter(name = "CreateTripRequest", description = "", required = true) @Valid @RequestBody CreateTripRequest createTripRequest
    );


    /**
     * DELETE /api/trips/{tripId} : Delete trip
     * Delete a trip by its ID
     *
     * @param tripId The ID of the trip to delete (required)
     * @return Trip deleted successfully (status code 204)
     *         or Trip not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiTripsTripIdDelete",
        summary = "Delete trip",
        description = "Delete a trip by its ID",
        tags = { "Trips" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Trip deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Trip not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/trips/{tripId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> apiTripsTripIdDelete(
        @Parameter(name = "tripId", description = "The ID of the trip to delete", required = true, in = ParameterIn.PATH) @PathVariable("tripId") Long tripId
    );


    /**
     * GET /api/trips/{tripId} : Get trip by ID
     * Retrieve a specific trip by its ID
     *
     * @param tripId The ID of the trip to retrieve (required)
     * @return Trip found (status code 200)
     *         or Trip not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiTripsTripIdGet",
        summary = "Get trip by ID",
        description = "Retrieve a specific trip by its ID",
        tags = { "Trips" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trip found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Trip.class))
            }),
            @ApiResponse(responseCode = "404", description = "Trip not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/trips/{tripId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Trip> apiTripsTripIdGet(
        @Parameter(name = "tripId", description = "The ID of the trip to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("tripId") Long tripId
    );


    /**
     * PUT /api/trips/{tripId} : Update trip
     * Update an existing trip with new details
     *
     * @param tripId The ID of the trip to update (required)
     * @param updateTripRequest  (required)
     * @return Trip updated successfully (status code 200)
     *         or Bad request - invalid input (status code 400)
     *         or Trip not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiTripsTripIdPut",
        summary = "Update trip",
        description = "Update an existing trip with new details",
        tags = { "Trips" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Trip updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Trip.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Trip not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/trips/{tripId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Trip> apiTripsTripIdPut(
        @Parameter(name = "tripId", description = "The ID of the trip to update", required = true, in = ParameterIn.PATH) @PathVariable("tripId") Long tripId,
        @Parameter(name = "UpdateTripRequest", description = "", required = true) @Valid @RequestBody UpdateTripRequest updateTripRequest
    );

}
